name: 🏗️ CI/CD Pipeline for IaC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: aws-iac-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 🔨 Terraform IaC Pipeline
    runs-on: ubuntu-latest
    env:
      TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
      TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DOMAIN: "${{ secrets.DOMAIN_NAME }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        run: terraform init

      - name: Resolve AWS resource IDs
        id: resolve_ids
        run: |
          OAI_ID=$(aws cloudfront list-cloud-front-origin-access-identities \
            --query "CloudFrontOriginAccessIdentityList.Items[?Comment=='Origin Access Identity for portfolio site'].Id | [0]" \
            --output text || echo "")
          echo "OAI_ID=$OAI_ID" >> $GITHUB_ENV

          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Aliases.Items, '${DOMAIN}')].Id | [0]" \
            --output text || echo "")
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --dns-name $DOMAIN \
            --query "HostedZones[0].Id" \
            --output text | cut -d'/' -f3 || echo "")
          echo "HOSTED_ZONE_ID=$HOSTED_ZONE_ID" >> $GITHUB_ENV

      - name: Import existing resources into state
        run: |
          # Import S3 bucket and configs
          if aws s3api head-bucket --bucket "$TF_VAR_bucket_name" 2>/dev/null; then
            if ! terraform state list | grep -q '^aws_s3_bucket\.static_site$'; then
              terraform import aws_s3_bucket.static_site $TF_VAR_bucket_name
            fi
            if ! terraform state list | grep -q '^aws_s3_bucket_public_access_block\.static_site$'; then
              terraform import aws_s3_bucket_public_access_block.static_site $TF_VAR_bucket_name
            fi
            if ! terraform state list | grep -q '^aws_s3_bucket_website_configuration\.static_site$'; then
              terraform import aws_s3_bucket_website_configuration.static_site $TF_VAR_bucket_name
            fi
            # Import S3 bucket policy only if it actually exists
            if aws s3api get-bucket-policy --bucket "$TF_VAR_bucket_name" --region "$AWS_REGION" 2>/dev/null; then
              if ! terraform state list | grep -q '^aws_s3_bucket_policy\.static_site_policy$'; then
                terraform import aws_s3_bucket_policy.static_site_policy $TF_VAR_bucket_name
              fi
            else
              echo "No bucket policy found for $TF_VAR_bucket_name, skipping import of aws_s3_bucket_policy.static_site_policy"
            fi
          fi

          # Import CloudFront OAI if it exists and not in state
          if [[ -n "$OAI_ID" && "$OAI_ID" != "None" ]]; then
            if ! terraform state list | grep -q '^aws_cloudfront_origin_access_identity\.oai$'; then
              terraform import aws_cloudfront_origin_access_identity.oai $OAI_ID
            fi
          fi

          # Import CloudFront Distribution if it exists and not in state
          if [[ -n "$DISTRIBUTION_ID" && "$DISTRIBUTION_ID" != "None" ]]; then
            if ! terraform state list | grep -q '^aws_cloudfront_distribution\.static_site$'; then
              terraform import aws_cloudfront_distribution.static_site $DISTRIBUTION_ID
            fi
          fi

          # Import Route53 records ONLY if A record exists in AWS
          if [[ -n "$HOSTED_ZONE_ID" && "$HOSTED_ZONE_ID" != "None" ]]; then
            # Root alias A record
            ROOT_A_EXISTS=$(aws route53 list-resource-record-sets \
              --hosted-zone-id "$HOSTED_ZONE_ID" \
              --query "ResourceRecordSets[?Name=='${DOMAIN}.' && Type=='A'] | length(@)" \
              --output text)
            if [[ "$ROOT_A_EXISTS" -gt 0 ]]; then
              if ! terraform state list | grep -q '^aws_route53_record\.root_alias$'; then
                terraform import aws_route53_record.root_alias ${HOSTED_ZONE_ID}_${DOMAIN}_A
              fi
            else
              echo "No root_alias A record found for ${DOMAIN}. -- skipping import"
            fi

            # www alias A record
            WWW_A_EXISTS=$(aws route53 list-resource-record-sets \
              --hosted-zone-id "$HOSTED_ZONE_ID" \
              --query "ResourceRecordSets[?Name=='www.${DOMAIN}.' && Type=='A'] | length(@)" \
              --output text)
            if [[ "$WWW_A_EXISTS" -gt 0 ]]; then
              if terraform state list | grep -q '^aws_route53_record\.www_alias$'; then
                terraform state rm aws_route53_record.www_alias
              fi
              terraform import aws_route53_record.www_alias ${HOSTED_ZONE_ID}_www_A
            else
              echo "No www_alias A record found for www.${DOMAIN}. -- skipping import"
            fi
          fi

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: terraform apply -input=false -auto-approve tfplan